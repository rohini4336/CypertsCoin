# Copyright (c) 2009-2010 Satoshi Nakamoto
# Distributed under the MIT/X11 software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.

# x13 Version by mammix2 (mammix2@hotmail.com)

CC=gcc
CXX=g++
USE_UPNP:=1
USE_IPV6:=1
STATIC:=1

#DEPSDIR?=/usr/local
BOOST_SUFFIX?=-mgw63-mt-d-1_63

INCLUDEPATHS= \
	-I"$(CURDIR)" \
        -I"/c/tools/boost/x64/include/boost-1_63/" \
        -I"/c/tools/berkeley-db/db4/x64/include/" \
        -I"/c/tools/openssl/x64/include/" \
        -I"/c/tools/libevent/x64/include/" \
        -I"/c/tools/leveldb/leveldb/include/" \
        -I"/c/tools/leveldb/leveldb/helpers/"


LIBPATHS= \
        -L"/c/tools/leveldb/x64/" \
        -L"/c/tools/boost/boost_1_63_0/stage/lib/" \
        -L"/c/tools/berkeley-db/db4/x64/lib/" \
        -L"/c/tools/openssl/x64/lib/" \
        -L"/c/tools/libevent/x64/lib/" \
        -L"/c/tools/leveldb/x64/" \
        -L"/c/tools/leveldb/x64/libleveldb.a" \
        -L"/c/tools/leveldb/x64/libmemenv.a"

LIBS= \
	-l leveldb \
	-l memenv \
        -l boost_system$(BOOST_SUFFIX) \
        -l boost_filesystem$(BOOST_SUFFIX) \
        -l boost_program_options$(BOOST_SUFFIX) \
        -l boost_thread$(BOOST_SUFFIX) \
        -l boost_chrono$(BOOST_SUFFIX) \
	-l db_cxx \
	-l ssl \
	-l crypto \
	-l event \
        -l z

DEFS=-DWIN32 -D_WINDOWS -DBOOST_THREAD_USE_LIB -DBOOST_SPIRIT_THREADSAFE -D__NO_SYSTEM_INCLUDES 
DEBUGFLAGS=-g
CFLAGS=-mthreads -O2 -msse2 -w -Wall -Wextra -Wno-ignored-qualifiers -Wformat -Wformat-security -Wno-unused-parameter $(DEBUGFLAGS) $(DEFS) $(INCLUDEPATHS)
LDFLAGS=-Wl,--dynamicbase -Wl,--nxcompat

TESTDEFS = -DTEST_DATA_DIR=$(abspath test/data)

ifndef USE_UPNP
	override USE_UPNP = -
endif
ifneq (${USE_UPNP}, -)
        INCLUDEPATHS += -I"C:/tools/miniupnpc"
        LIBPATHS += -L"C:/tools/miniupnpc/miniupnpc"
	LIBS += -l miniupnpc -l iphlpapi
        DEFS += -DSTATICLIB -DMINIUPNP_STATICLIB -DUSE_UPNP=$(USE_UPNP)
endif

ifneq (${USE_IPV6}, -)
	DEFS += -DUSE_IPV6=$(USE_IPV6)
endif


ifdef STATIC
  LIBS += \
	"/c/tools/boost/x64/lib/libboost_system-mgw63-mt-1_63.a" \
	"/c/tools/boost/x64/lib/libboost_filesystem-mgw63-mt-1_63.a" \
	"/c/tools/boost/x64/lib/libboost_program_options-mgw63-mt-1_63.a" \
	"/c/tools/boost/x64/lib/libboost_thread-mgw63-mt-1_63.a" \
        "/c/tools/boost/x64/lib/libboost_chrono-mgw63-mt-1_63.a" \
        "/c/tools/libevent/x64/lib/libevent.a" \
        "/c/tools/berkeley-db/db4/x64/lib/libdb_cxx-4.8.a" \
        "/c/tools/leveldb/x64/libleveldb.a" \
        "/c/tools/leveldb/x64/libmemenv.a" \
        "/c/tools/openssl/x64/lib/libssl.a" \
	"/c/tools/msys64/mingw64/lib/libz.a" \
        "/c/tools/openssl/x64/lib/libcrypto.a"


endif
LIBS += -l kernel32 -l user32 -l gdi32 -l comdlg32 -l winspool -l winmm -l shell32 -l comctl32 -l ole32 -l oleaut32 -l uuid -l rpcrt4 -l advapi32 -l ws2_32 -l mswsock -l shlwapi
# Hardening
# Make some classes of vulnerabilities unexploitable in case one is discovered.
#
    # This is a workaround for Ubuntu bug #691722, the default -fstack-protector causes
    # -fstack-protector-all to be ignored unless -fno-stack-protector is used first.
    # see: https://bugs.launchpad.net/ubuntu/+source/gcc-4.5/+bug/691722
    HARDENING=-fno-stack-protector

    # Stack Canaries
    # Put numbers at the beginning of each stack frame and check that they are the same.
    # If a stack buffer if overflowed, it writes over the canary number and then on return
    # when that number is checked, it won't be the same and the program will exit with
    # a "Stack smashing detected" error instead of being exploited.
    HARDENING+=-fstack-protector-all -Wstack-protector

    # Make some important things such as the global offset table read only as soon as
    # the dynamic linker is finished building it. This will prevent overwriting of addresses
    # which would later be jumped to.
    LDHARDENING+=-Wl,-z,relro -Wl,-z,now

    # -D_FORTIFY_SOURCE=2 does some checking for potentially exploitable code patterns in
    # the source such overflowing a statically defined buffer.
    HARDENING+=-D_FORTIFY_SOURCE=2
#
#DEBUGFLAGS=-g

# TODO: make the mingw builds smarter about dependencies, like the linux/osx builds are
HEADERS = $(wildcard *.h)
HEADERS = $(CURDIR)/util.h

OBJS= \
	obj/address.o \
	obj/addressmap.o \
	obj/aes.o \
	obj/backtrace.o \
	obj/buffers.o \
	obj/channel.o \
	obj/channeltls.o \
	obj/circpathbias.o \
	obj/circuitbuild.o \
	obj/circuitlist.o \
	obj/circuitmux.o \
	obj/circuitmux_ewma.o \
	obj/circuitstats.o \
	obj/circuituse.o \
	obj/command.o \
	obj/compat.o \
	obj/compat_libevent.o \
	obj/config.o \
	obj/config_codedigest.o \
	obj/confparse.o \
	obj/connection.o \
	obj/connection_edge.o \
	obj/connection_or.o \
	obj/container.o \
	obj/control.o \
	obj/cpuworker.o \
	obj/crypto.o \
	obj/crypto_curve25519.o \
	obj/crypto_format.o \
	obj/curve25519-donna.o \
	obj/di_ops.o \
	obj/directory.o \
	obj/dirserv.o \
	obj/dirvote.o \
	obj/dns.o \
	obj/dnsserv.o \
	obj/entrynodes.o \
	obj/ext_orport.o \
	obj/fp_pair.o \
	obj/geoip.o \
	obj/hibernate.o \
	obj/log.o \
	obj/memarea.o \
	obj/mempool.o \
	obj/microdesc.o \
	obj/networkstatus.o \
	obj/nodelist.o \
	obj/onion.o \
	obj/onion_fast.o \
	obj/onion_main.o \
	obj/onion_ntor.o \
	obj/onion_tap.o \
	obj/policies.o \
	obj/procmon.o \
	obj/reasons.o \
	obj/relay.o \
	obj/rendclient.o \
	obj/rendcommon.o \
	obj/rendmid.o \
	obj/rendservice.o \
	obj/rephist.o \
	obj/replaycache.o \
	obj/router.o \
	obj/routerlist.o \
	obj/routerparse.o \
	obj/routerset.o \
	obj/sandbox.o \
	obj/statefile.o \
	obj/status.o \
	obj/torgzip.o \
	obj/tortls.o \
	obj/tor_util.o \
	obj/transports.o \
	obj/util_codedigest.o \
	obj/fugue.o \
	obj/hamsi.o \
	obj/groestl.o \
	obj/blake.o \
	obj/bmw.o \
	obj/skein.o \
	obj/keccak.o \
	obj/shavite.o \
	obj/jh.o \
	obj/luffa.o \
	obj/cubehash.o \
	obj/echo.o \
	obj/simd.o \
	obj/alert.o \
	obj/version.o \
	obj/checkpoints.o \
	obj/netbase.o \
	obj/addrman.o \
	obj/crypter.o \
	obj/key.o \
	obj/db.o \
	obj/init.o \
	obj/keystore.o \
	obj/miner.o \
	obj/main.o \
	obj/net.o \
	obj/protocol.o \
	obj/bitcoinrpc.o \
	obj/rpcdump.o \
	obj/rpcnet.o \
	obj/rpcmining.o \
	obj/rpcwallet.o \
	obj/rpcblockchain.o \
	obj/rpcrawtransaction.o \
	obj/script.o \
	obj/sync.o \
	obj/util.o \
	obj/wallet.o \
	obj/walletdb.o \
	obj/noui.o \
	obj/kernel.o \
	obj/pbkdf2.o \
	obj/scrypt.o \
	obj/scrypt-arm.o \
	obj/scrypt-x86.o \
	obj/scrypt-x86_64.o \
	obj/txdb-leveldb.o \
	obj/aes_helper.o

all: CypertsCoind.exe

#LIBS += $(CURDIR)/leveldb/libleveldb.a $(CURDIR)/leveldb/libmemenv.a
#DEFS += $(addprefix -I,$(CURDIR)/leveldb/include)
#DEFS += $(addprefix -I,$(CURDIR)/leveldb/helpers)

#leveldb/libleveldb.a:
#	cd leveldb; make; cd ..
#obj/txdb-leveldb.o: leveldb/libleveldb.a

obj/%.o: %.cpp $(HEADERS)
	$(CXX) -c $(CFLAGS) -o $@ $<

obj/anonymize.o: tor/anonymize.cpp
	$(CXX) -c $(CFLAGS) -o $@ $<

obj/scrypt-x86.o: scrypt-x86.S
	$(CXX) -c $(xCXXFLAGS) -MMD -o $@ $<

obj/scrypt-x86_64.o: scrypt-x86_64.S
	$(CXX) -c $(xCXXFLAGS) -MMD -o $@ $<

obj/scrypt-arm.o: scrypt-arm.S
	$(CXX) -c $(xCXXFLAGS) -MMD -o $@ $<

obj/%.o: %.c
	$(CXX) -c $(xCXXFLAGS) -fpermissive -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	-e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \

	rm -f $(@:%.o=%.d)

obj/%.o: tor/%.c
	$(CC) -c $(xCXXFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	-e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \

	rm -f $(@:%.o=%.d)

obj/%.o: %.cpp
	$(CXX) -c $(xCXXFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	-e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	rm -f $(@:%.o=%.d)

obj/%.o: tor/%.cpp
	$(CC) -c $(xCXXFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	-e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	rm -f $(@:%.o=%.d)
	

CypertsCoind.exe: $(OBJS:obj/%=obj/%) obj/anonymize.o
	g++ $(CFLAGS) $(LDFLAGS) -o $@ $(LIBPATHS) $^ $(LIBS)

clean:
	-rm -f CypertsCoind
	-rm -f obj/*.o
	-rm -f obj/tor/*.o
	-rm -f obj/tor/*.P
	-rm -f obj/*.P
	-rm -f obj-test/*.o
	-rm -f obj-test/*.P
	-rm -f obj/*.d
	-rm -f obj/build.h
	-rm -f leveldb/libleveldb.a
	-rm -f leveldb/libmemenv.a

FORCE:
